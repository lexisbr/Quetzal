/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,25],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,17],$V8=[1,18],$V9=[1,30],$Va=[1,26],$Vb=[1,27],$Vc=[1,29],$Vd=[1,28],$Ve=[5,17,23,28,38,39,40,43,46,48,49,90,95,97,98,103],$Vf=[1,41],$Vg=[1,42],$Vh=[1,59],$Vi=[1,68],$Vj=[1,77],$Vk=[1,70],$Vl=[1,71],$Vm=[1,72],$Vn=[1,73],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,69],$Vz=[1,78],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[1,83],$VF=[1,84],$VG=[2,110],$VH=[2,42],$VI=[1,96],$VJ=[1,105],$VK=[1,111],$VL=[1,112],$VM=[1,122],$VN=[1,123],$VO=[1,124],$VP=[1,119],$VQ=[1,120],$VR=[1,113],$VS=[1,114],$VT=[1,115],$VU=[1,116],$VV=[1,117],$VW=[1,118],$VX=[1,106],$VY=[1,107],$VZ=[1,108],$V_=[1,109],$V$=[1,110],$V01=[1,121],$V11=[8,18,19,26,32,57,58,59,66,67,68,69,70,71,72,73,74,75,76,77,78,85,86],$V21=[26,32],$V31=[8,26,32,57,58,59,66,67,68,69,70,71,72,73,74,75,76,77,78,85,86],$V41=[8,26,32,57,58,59,66,67,68,69,70,71,72,73,74,75,85,86],$V51=[8,26,32,57,58,59,66,67,68,69,70,71,72,73,85,86],$V61=[8,26,32,57,58,59,66,67,85,86];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"RAICES":4,"EOF":5,"RAIZ":6,"PRINT":7,"semicolon":8,"DECLARACION_NULA":9,"DECLARACION":10,"FUNCION":11,"WHILE":12,"DO_WHILE":13,"FOR":14,"RETURN":15,"LLAMADA":16,"identifier":17,"incremento":18,"decremento":19,"ASIGNACION":20,"IF":21,"MAIN":22,"void":23,"main":24,"lparen":25,"rparen":26,"allave":27,"cllave":28,"TIPO":29,"LIST_PARAMETROS":30,"PARAMETROS":31,"coma":32,"PARAMETRO":33,"LIST_ARGUMENTOS":34,"ARGUMENTOS":35,"ARGUMENTO":36,"EXPR":37,"while":38,"do":39,"for":40,"FOR_VARIABLE":41,"FOR_INSTRUCCION":42,"return":43,"RETURN_OP":44,"asig":45,"if":46,"else":47,"print":48,"println":49,"PRIMITIVA":50,"OP_ARITMETICAS":51,"OP_RELACIONALES":52,"OP_LOGICAS":53,"OP_TERNARIA":54,"NATIVAS_STRING":55,"NATIVA":56,"concat":57,"repeat":58,"dot":59,"charOfPos":60,"subString":61,"length":62,"toUpper":63,"toLower":64,"not":65,"and":66,"or":67,"equal":68,"lte":69,"gte":70,"nequal":71,"lt":72,"gt":73,"plus":74,"minus":75,"times":76,"div":77,"mod":78,"pow":79,"sqrt":80,"log":81,"sin":82,"cos":83,"tan":84,"question":85,"colon":86,"integer":87,"decimal":88,"string":89,"char":90,"null":91,"true":92,"false":93,"dollar":94,"int":95,"parse":96,"double":97,"boolean":98,"toInt":99,"toDouble":100,"toSTRING":101,"typeof":102,"String":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semicolon",17:"identifier",18:"incremento",19:"decremento",23:"void",24:"main",25:"lparen",26:"rparen",27:"allave",28:"cllave",32:"coma",38:"while",39:"do",40:"for",43:"return",45:"asig",46:"if",47:"else",48:"print",49:"println",57:"concat",58:"repeat",59:"dot",60:"charOfPos",61:"subString",62:"length",63:"toUpper",64:"toLower",65:"not",66:"and",67:"or",68:"equal",69:"lte",70:"gte",71:"nequal",72:"lt",73:"gt",74:"plus",75:"minus",76:"times",77:"div",78:"mod",79:"pow",80:"sqrt",81:"log",82:"sin",83:"cos",84:"tan",85:"question",86:"colon",87:"integer",88:"decimal",89:"string",90:"char",91:"null",92:"true",93:"false",94:"dollar",95:"int",96:"parse",97:"double",98:"boolean",99:"toInt",100:"toDouble",101:"toSTRING",102:"typeof",103:"String"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,3],[6,3],[6,2],[6,1],[6,1],[22,7],[11,8],[30,1],[30,0],[31,3],[31,1],[33,1],[16,4],[34,1],[34,0],[35,3],[35,1],[36,1],[12,7],[13,8],[14,11],[41,1],[41,1],[42,2],[42,2],[15,2],[44,1],[44,0],[10,4],[9,2],[20,3],[21,7],[21,11],[21,9],[7,4],[7,4],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[55,3],[55,3],[55,6],[55,8],[55,5],[55,5],[55,5],[53,2],[53,3],[53,3],[52,3],[52,3],[52,3],[52,3],[52,3],[52,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,2],[51,2],[51,6],[51,4],[51,4],[51,4],[51,4],[51,4],[54,5],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[50,3],[50,2],[56,6],[56,6],[56,6],[56,4],[56,4],[56,4],[56,4],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 23: case 29:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 9: case 11: case 12: case 15:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 10: case 16: case 17: case 20: case 24: case 26: case 30:
 this.$ = $$[$0]; 
break;
case 13:
 this.$ = new Incremento(new Operacion(new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),Operador.INCREMENTO, _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 14:
 this.$ = new Decremento(new Operacion(new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),Operador.DECREMENTO, _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 18:
this.$ = new Main($$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 19:
 this.$ = new Funcion($$[$0-6],$$[$0-4],$$[$0-1],$$[$0-7],_$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 21: case 27:
 this.$ = []; 
break;
case 22: case 28:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 25:
 this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 31:
 this.$ = new While($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 32:
 this.$ = new DoWhile($$[$0-5],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 33:
this.$ = new For($$[$0-1],$$[$0-8],$$[$0-6],$$[$0-4],_$[$0-10].first_line,_$[$0-10]); 
break;
case 34: case 35:
this.$ = $$[$0]
break;
case 36:
 this.$ = new Incremento(new Operacion(new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 37:
 this.$ = new Decremento(new Operacion(new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 38:
 this.$ = new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 39:
this.$ = $$[$0]; 
break;
case 40:
this.$ = null; 
break;
case 41:
 this.$ = new Declaracion($$[$0-2],$$[$0],$$[$0-3],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 42:
 this.$ = new Declaracion($$[$0],null,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 43:
 this.$ =  new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 44:
 this.$ = new If($$[$0-4],$$[$0-1],null,null,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 45:
 this.$ = new If($$[$0-8],$$[$0-5],$$[$0-1],null,_$[$0-10].first_line, _$[$0-10].first_column);
break;
case 46:
 this.$ = new If($$[$0-6],$$[$0-3],null,$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 47:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,false); 
break;
case 48:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,true); 
break;
case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 57: case 97:
 this.$ = $$[$0] 
break;
case 56:
 this.$ = new Identificador($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 58:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.CONCAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.REPEAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
this.$ = new CharOfPosition($$[$0-5],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 61:
this.$ = new SubString($$[$0-7],$$[$0-3],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 62:
this.$ = new Length($$[$0-4],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 63:
this.$ = new ToUpper($$[$0-4],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 64:
this.$ = new ToLower($$[$0-4],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 65:
 this.$ = new Logica($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66:
 this.$ = new Logica($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Logica($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 69:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 71:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 72:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 73:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 74:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 80:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 81:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 82:
 this.$ = new Operacion($$[$0-3],$$[$0-1],Operador.POW, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 83:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.SQRT, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 84:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.LOG, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 85:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.SENO, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 86:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.COSENO, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 87:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.TAN, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 88:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 89: case 90:
 this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 91: case 92:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 93:
 this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 94:
 this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column); 
break;
case 95:
 this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column); 
break;
case 96:
 this.$ = $$[$0-1] 
break;
case 98:
this.$ = new TipoParse(Tipo.INT,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 99:
this.$ = new TipoParse(Tipo.DOUBLE,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 100:
this.$ = new TipoParse(Tipo.BOOL,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 101:
this.$ = new ToInt($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 102:
this.$ = new ToDouble($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 103:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 104:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 105:
this.$ = Tipo.INT; 
break;
case 106:
this.$ = Tipo.DOUBLE; 
break;
case 107:
this.$ = Tipo.STRING; 
break;
case 108:
this.$ = Tipo.BOOL; 
break;
case 109:
this.$ = Tipo.CHAR; 
break;
case 110:
this.$ = Tipo.VOID; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{1:[3]},{5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},o($Ve,[2,3]),{8:[1,33]},{8:[1,34]},{8:[1,35]},o($Ve,[2,7]),o($Ve,[2,8]),{8:[1,36]},o($Ve,[2,10]),{8:[1,37]},{8:[1,38]},{18:[1,39],19:[1,40],25:$Vf,45:$Vg},{8:[1,43]},o($Ve,[2,16]),o($Ve,[2,17]),{25:[1,44]},{25:[1,45]},{17:[1,46]},{25:[1,47]},{27:[1,48]},{25:[1,49]},{8:[2,40],16:60,17:$Vh,25:$Vi,37:51,44:50,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{25:[1,85]},{17:$VG,24:[1,86]},{17:[2,105]},{17:[2,106]},{17:[2,107]},{17:[2,108]},{17:[2,109]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,9]),o($Ve,[2,11]),o($Ve,[2,12]),{8:[1,87]},{8:[1,88]},{16:60,17:$Vh,25:$Vi,26:[2,27],34:89,35:90,36:91,37:92,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:93,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($Ve,[2,15]),{16:60,17:$Vh,25:$Vi,37:94,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:95,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{8:$VH,25:[1,97],45:$VI},{16:60,17:$Vh,25:$Vi,37:98,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{4:99,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{10:101,17:[1,104],20:102,23:$VJ,29:103,41:100,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{8:[2,38]},{8:[2,39],18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},o($V11,[2,49]),o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),o($V11,[2,53]),o($V11,[2,54]),o($V11,[2,55]),o($V11,[2,56],{25:$Vf}),o($V11,[2,57]),o($V11,[2,89]),o($V11,[2,90]),o($V11,[2,91]),o($V11,[2,92]),o($V11,[2,93]),o($V11,[2,94]),o($V11,[2,95]),{16:60,17:$Vh,25:$Vi,37:125,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:126,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:127,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{25:[1,128]},{25:[1,129]},{25:[1,130]},{25:[1,131]},{25:[1,132]},{25:[1,133]},{16:60,17:$Vh,25:$Vi,37:134,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{59:[1,135]},{59:[1,136]},{59:[1,137]},{25:[1,138]},{25:[1,139]},{25:[1,140]},{25:[1,141]},{16:60,17:$Vh,25:$Vi,37:142,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{25:[1,143]},o($Ve,[2,13]),o($Ve,[2,14]),{26:[1,144]},{26:[2,26],32:[1,145]},o($V21,[2,29]),o($V21,[2,30],{18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01}),{8:[2,43],18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,146],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,147],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{16:60,17:$Vh,25:$Vi,37:148,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{9:152,23:$VJ,26:[2,21],29:153,30:149,31:150,33:151,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{18:$VK,19:$VL,26:[1,154],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,28:[1,155],29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{8:[1,156]},{8:[2,34]},{8:[2,35]},{17:[1,157]},{45:$Vg},{17:$VG},{16:60,17:$Vh,25:$Vi,37:158,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:159,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:160,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:161,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:162,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($V11,[2,80]),o($V11,[2,81]),{16:60,17:$Vh,25:$Vi,37:163,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:164,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:165,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:166,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:167,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:168,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:169,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:170,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:171,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:172,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:173,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{60:[1,174],61:[1,175],62:[1,176],63:[1,177],64:[1,178]},{18:$VK,19:$VL,26:[1,179],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},o([8,26,32,85,86],[2,97],{18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o($V11,[2,79]),{16:60,17:$Vh,25:$Vi,37:180,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:181,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:182,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:183,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:184,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:185,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($V31,[2,65],{18:$VK,19:$VL}),{96:[1,186]},{96:[1,187]},{96:[1,188]},{16:60,17:$Vh,25:$Vi,37:189,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:190,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:191,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:192,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{18:$VK,19:$VL,26:[1,193],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{26:[1,194]},o($V11,[2,25]),{16:60,17:$Vh,25:$Vi,36:195,37:92,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{8:[2,47]},{8:[2,48]},{8:[2,41],18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{26:[1,196]},{26:[2,20],32:[1,197]},o($V21,[2,23]),o($V21,[2,24]),{17:[1,198]},{27:[1,199]},{38:[1,200]},{16:60,17:$Vh,25:$Vi,37:201,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{45:$VI},o($V41,[2,74],{18:$VK,19:$VL,76:$VZ,77:$V_,78:$V$}),o($V41,[2,75],{18:$VK,19:$VL,76:$VZ,77:$V_,78:$V$}),o($V31,[2,76],{18:$VK,19:$VL}),o($V31,[2,77],{18:$VK,19:$VL}),o($V31,[2,78],{18:$VK,19:$VL}),o($V51,[2,68],{18:$VK,19:$VL,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o($V51,[2,69],{18:$VK,19:$VL,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o($V51,[2,70],{18:$VK,19:$VL,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o($V51,[2,71],{18:$VK,19:$VL,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o($V51,[2,72],{18:$VK,19:$VL,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o($V51,[2,73],{18:$VK,19:$VL,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o($V61,[2,66],{18:$VK,19:$VL,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o([8,26,32,58,59,67,85,86],[2,67],{18:$VK,19:$VL,57:$VM,66:$VP,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),{18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01,86:[1,202]},o($V61,[2,58],{18:$VK,19:$VL,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),o([8,26,32,58,59,85,86],[2,59],{18:$VK,19:$VL,57:$VM,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$}),{25:[1,203]},{25:[1,204]},{25:[1,205]},{25:[1,206]},{25:[1,207]},o($V11,[2,96]),{18:$VK,19:$VL,32:[1,208],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,209],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,210],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,211],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,212],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,213],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{25:[1,214]},{25:[1,215]},{25:[1,216]},{18:$VK,19:$VL,26:[1,217],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,218],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,219],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,220],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{27:[1,221]},{27:[1,222]},o($V21,[2,28]),{27:[1,223]},{9:152,23:$VJ,29:153,33:224,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},o($V21,$VH),{4:225,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{25:[1,226]},{8:[1,227],18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{16:60,17:$Vh,25:$Vi,37:228,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:229,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:230,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{26:[1,231]},{26:[1,232]},{26:[1,233]},{16:60,17:$Vh,25:$Vi,37:234,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($V11,[2,83]),o($V11,[2,84]),o($V11,[2,85]),o($V11,[2,86]),o($V11,[2,87]),{16:60,17:$Vh,25:$Vi,37:235,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:236,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{16:60,17:$Vh,25:$Vi,37:237,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($V11,[2,101]),o($V11,[2,102]),o($V11,[2,103]),o($V11,[2,104]),{4:238,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{4:239,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{4:240,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},o($V21,[2,22]),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,28:[1,241],29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{16:60,17:$Vh,25:$Vi,37:242,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},{17:[1,244],42:243},o([8,26,32,86],[2,88],{18:$VK,19:$VL,57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01}),{18:$VK,19:$VL,26:[1,245],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,32:[1,246],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},o($V11,[2,62]),o($V11,[2,63]),o($V11,[2,64]),{18:$VK,19:$VL,26:[1,247],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,248],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,249],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{18:$VK,19:$VL,26:[1,250],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,28:[1,251],29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,28:[1,252],29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,28:[1,253],29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},o($Ve,[2,31]),{18:$VK,19:$VL,26:[1,254],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{26:[1,255]},{18:[1,256],19:[1,257]},o($V11,[2,60]),{16:60,17:$Vh,25:$Vi,37:258,50:52,51:53,52:54,53:55,54:56,55:57,56:58,65:$Vj,75:$Vk,79:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,87:$Vr,88:$Vs,89:$Vt,90:$Vu,91:$Vv,92:$Vw,93:$Vx,94:$Vy,95:$Vz,97:$VA,98:$VB,99:$VC,100:$VD,101:$VE,102:$VF},o($V11,[2,82]),o($V11,[2,98]),o($V11,[2,99]),o($V11,[2,100]),o($Ve,[2,44],{47:[1,259]}),o($Ve,[2,18]),o($Ve,[2,19]),{8:[2,32]},{27:[1,260]},{26:[2,36]},{26:[2,37]},{18:$VK,19:$VL,26:[1,261],57:$VM,58:$VN,59:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX,75:$VY,76:$VZ,77:$V_,78:$V$,85:$V01},{21:263,27:[1,262],46:$V6},{4:264,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},o($V11,[2,61]),{4:265,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},o($Ve,[2,46]),{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,28:[1,266],29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:$V0,20:14,21:15,22:16,23:$V1,28:[1,267],29:19,38:$V2,39:$V3,40:$V4,43:$V5,46:$V6,48:$V7,49:$V8,90:$V9,95:$Va,97:$Vb,98:$Vc,103:$Vd},o($Ve,[2,33]),o($Ve,[2,45])],
defaultActions: {26:[2,105],27:[2,106],28:[2,107],29:[2,108],30:[2,109],31:[2,1],50:[2,38],101:[2,34],102:[2,35],105:[2,110],146:[2,47],147:[2,48],254:[2,32],256:[2,36],257:[2,37]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Print} = require("../Instrucciones/Print.js");
    const {Primitivo} = require("../Expresiones/Primitivo.js");
    const {Operacion} = require("../Expresiones/Operacion.js");
    const {Operador} = require("../AST/Operador.js");

    const {Relacional} = require("../Expresiones/Relacional.js");
    const {Logica} = require("../Expresiones/Logica.js");
    const {Identificador} = require("../Expresiones/Identificador.js");
    const {Ternario} = require("../Expresiones/Ternario.js");
    const {CharOfPosition} = require("../Expresiones/NativasString/CharOfPosition.js");
    const {SubString} = require("../Expresiones/NativasString/SubString.js");
    //const {LengthString} = require("../Expresiones/NativasString/LengthString.js");
    const {Length} = require("../Expresiones/NativasString/Length.js");
    const {ToUpper} = require("../Expresiones/NativasString/ToUpper.js");
    const {ToLower} = require("../Expresiones/NativasString/ToLower.js");
    const {Incremento} = require("../Expresiones/Incremento.js");
    const {Decremento} = require("../Expresiones/Decremento.js");
    const {TipoParse} = require("../Expresiones/Nativas/TipoParse.js");
    const {ToInt} = require("../Expresiones/Nativas/ToInt.js");
    const {ToDouble} = require("../Expresiones/Nativas/ToDouble.js");
    const {ToString} = require("../Expresiones/Nativas/ToString.js");
    const {Typeof} = require("../Expresiones/Nativas/Typeof.js");
    const {If} = require("../Instrucciones/If.js");

    const {Tipo} = require("../AST/Tipo.js");
    const {Declaracion} = require("../Instrucciones/Declaracion.js");
    const {Asignacion} = require("../Instrucciones/Asignacion.js");
    const {Funcion} = require("../Instrucciones/Funcion.js");
    const {Llamada} = require("../Instrucciones/Llamada.js");
    const {Return} = require("../Instrucciones/Return.js");
    const {Main} = require("../Instrucciones/Main.js");
    const {While} = require("../Instrucciones/While.js");
    const {DoWhile} = require("../Instrucciones/DoWhile.js");
    const {For} = require("../Instrucciones/For.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 91;
break;
case 4:return 95;
break;
case 5:return 97;
break;
case 6:return 98;
break;
case 7:return 90;
break;
case 8:return 103;
break;
case 9:return 23;
break;
case 10:return 92;
break;
case 11:return 93;
break;
case 12:return 48;
break;
case 13:return 49;
break;
case 14:return 43;
break;
case 15:return 24;
break;
case 16:return 38;
break;
case 17:return 39;
break;
case 18:return 40;
break;
case 19:return 46;
break;
case 20:return 47;
break;
case 21:return 24;
break;
case 22:return 79;
break;
case 23:return 80;
break;
case 24:return 81;
break;
case 25:return 82;
break;
case 26:return 83;
break;
case 27:return 84;
break;
case 28:return 60;
break;
case 29:return 61;
break;
case 30:return 62;
break;
case 31:return 63;
break;
case 32:return 64;
break;
case 33:return 96;
break;
case 34:return 99;
break;
case 35:return 100;
break;
case 36:return 101;
break;
case 37:return 102;
break;
case 38:return 18;
break;
case 39:return 19;
break;
case 40:return 74;
break;
case 41:return 75;
break;
case 42:return 76;
break;
case 43:return 77;
break;
case 44:return 78;
break;
case 45:return 68;
break;
case 46:return 69;
break;
case 47:return 70;
break;
case 48:return 71;
break;
case 49:return 72;
break;
case 50:return 73;
break;
case 51:return 45;
break;
case 52:return 66;
break;
case 53:return 67;
break;
case 54:return 65;
break;
case 55:return 57;
break;
case 56:return 58;
break;
case 57:return 94;
break;
case 58:return 8;
break;
case 59:return 86;
break;
case 60:return 25;
break;
case 61:return 26;
break;
case 62:return 85;
break;
case 63:return 27;
break;
case 64:return 28;
break;
case 65:return 32;
break;
case 66:return 59;
break;
case 67:return 88;
break;
case 68:return 87;
break;
case 69:return 17;
break;
case 70:return 89;
break;
case 71:return 90;
break;
case 72:return;
break;
case 73:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 74:return 5
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\s+)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:return\b)/,/^(?:main\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:main\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:log\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUpperCase\b)/,/^(?:toLowerCase\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:toString\b)/,/^(?:typeof\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\^)/,/^(?:\$)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/,/^(?:{Comment})/,/^(?:.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}