/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,29],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,19],$Va=[1,20],$Vb=[1,34],$Vc=[1,30],$Vd=[1,31],$Ve=[1,33],$Vf=[1,32],$Vg=[5,19,25,30,41,42,43,46,48,49,53,55,56,97,102,104,105,110],$Vh=[1,47],$Vi=[1,48],$Vj=[1,67],$Vk=[1,76],$Vl=[1,85],$Vm=[1,78],$Vn=[1,79],$Vo=[1,80],$Vp=[1,81],$Vq=[1,82],$Vr=[1,83],$Vs=[1,84],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,73],$Vy=[1,74],$Vz=[1,75],$VA=[1,77],$VB=[1,86],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[2,118],$VJ=[8,34],$VK=[2,50],$VL=[1,105],$VM=[1,114],$VN=[1,120],$VO=[1,121],$VP=[1,131],$VQ=[1,132],$VR=[1,133],$VS=[1,128],$VT=[1,129],$VU=[1,122],$VV=[1,123],$VW=[1,124],$VX=[1,125],$VY=[1,126],$VZ=[1,127],$V_=[1,115],$V$=[1,116],$V01=[1,117],$V11=[1,118],$V21=[1,119],$V31=[1,130],$V41=[8,20,21,28,34,64,65,66,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93],$V51=[28,34],$V61=[8,28,34,64,65,66,73,74,75,76,77,78,79,80,81,82,83,84,85,92,93],$V71=[8,28,34,64,65,66,73,74,75,76,77,78,79,80,81,82,92,93],$V81=[8,28,34,64,65,66,73,74,75,76,77,78,79,80,92,93],$V91=[8,28,34,64,65,66,73,74,92,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"RAICES":4,"EOF":5,"RAIZ":6,"PRINT":7,"semicolon":8,"DECLARACION_NULA":9,"DECLARACION":10,"FUNCION":11,"WHILE":12,"DO_WHILE":13,"FOR":14,"RETURN":15,"BREAK":16,"CONTINUE":17,"LLAMADA":18,"identifier":19,"incremento":20,"decremento":21,"ASIGNACION":22,"IF":23,"MAIN":24,"void":25,"main":26,"lparen":27,"rparen":28,"allave":29,"cllave":30,"TIPO":31,"LIST_PARAMETROS":32,"PARAMETROS":33,"coma":34,"PARAMETRO":35,"DECLARACION_PARAMETROS":36,"LIST_ARGUMENTOS":37,"ARGUMENTOS":38,"ARGUMENTO":39,"EXPR":40,"while":41,"do":42,"for":43,"FOR_VARIABLE":44,"FOR_INSTRUCCION":45,"return":46,"RETURN_OP":47,"break":48,"continue":49,"asig":50,"LIST_IDENTIFIERS":51,"IDENTIFIER":52,"if":53,"else":54,"print":55,"println":56,"PRIMITIVA":57,"OP_ARITMETICAS":58,"OP_RELACIONALES":59,"OP_LOGICAS":60,"OP_TERNARIA":61,"NATIVAS_STRING":62,"NATIVA":63,"concat":64,"repeat":65,"dot":66,"charOfPos":67,"subString":68,"length":69,"toUpper":70,"toLower":71,"not":72,"and":73,"or":74,"equal":75,"lte":76,"gte":77,"nequal":78,"lt":79,"gt":80,"plus":81,"minus":82,"times":83,"div":84,"mod":85,"pow":86,"sqrt":87,"log":88,"sin":89,"cos":90,"tan":91,"question":92,"colon":93,"integer":94,"decimal":95,"string":96,"char":97,"null":98,"true":99,"false":100,"dollar":101,"int":102,"parse":103,"double":104,"boolean":105,"toInt":106,"toDouble":107,"toSTRING":108,"typeof":109,"String":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"semicolon",19:"identifier",20:"incremento",21:"decremento",25:"void",26:"main",27:"lparen",28:"rparen",29:"allave",30:"cllave",34:"coma",41:"while",42:"do",43:"for",46:"return",48:"break",49:"continue",50:"asig",53:"if",54:"else",55:"print",56:"println",64:"concat",65:"repeat",66:"dot",67:"charOfPos",68:"subString",69:"length",70:"toUpper",71:"toLower",72:"not",73:"and",74:"or",75:"equal",76:"lte",77:"gte",78:"nequal",79:"lt",80:"gt",81:"plus",82:"minus",83:"times",84:"div",85:"mod",86:"pow",87:"sqrt",88:"log",89:"sin",90:"cos",91:"tan",92:"question",93:"colon",94:"integer",95:"decimal",96:"string",97:"char",98:"null",99:"true",100:"false",101:"dollar",102:"int",103:"parse",104:"double",105:"boolean",106:"toInt",107:"toDouble",108:"toSTRING",109:"typeof",110:"String"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[6,3],[6,2],[6,1],[6,1],[24,7],[11,8],[32,1],[32,0],[33,3],[33,1],[35,1],[36,2],[18,4],[37,1],[37,0],[38,3],[38,1],[39,1],[12,7],[13,8],[14,11],[44,1],[44,1],[45,2],[45,2],[15,2],[16,1],[17,1],[47,1],[47,0],[10,4],[9,2],[51,3],[51,1],[52,1],[22,3],[23,7],[23,11],[23,9],[7,4],[7,4],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[40,1],[62,3],[62,3],[62,6],[62,8],[62,5],[62,5],[62,5],[60,2],[60,3],[60,3],[59,3],[59,3],[59,3],[59,3],[59,3],[59,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,2],[58,2],[58,2],[58,6],[58,4],[58,4],[58,4],[58,4],[58,4],[61,5],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,1],[57,3],[57,2],[63,6],[63,6],[63,6],[63,4],[63,4],[63,4],[63,4],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 25: case 32: case 49:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 9: case 11: case 12: case 13: case 14: case 17:
 this.$ = $$[$0-1]; 
break;
case 7: case 8: case 10: case 18: case 19: case 22: case 26: case 29: case 33: case 50:
 this.$ = $$[$0]; 
break;
case 15:
 this.$ = new Incremento(new Operacion(new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),Operador.INCREMENTO, _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 16:
 this.$ = new Decremento(new Operacion(new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),new Identificador($$[$0-2],_$[$0-2].first_line, _$[$0-2].first_column),Operador.DECREMENTO, _$[$0-2].first_line, _$[$0-2].first_column),_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 20:
this.$ = new Main($$[$0-1],_$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 21:
 this.$ = new Funcion($$[$0-6],$$[$0-4],$$[$0-1],$$[$0-7],_$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 23: case 30:
 this.$ = []; 
break;
case 24: case 31: case 48:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 27:
 this.$ = new Declaracion($$[$0],null,$$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 28:
 this.$ = new Llamada($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 34:
 this.$ = new While($$[$0-1],$$[$0-4],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 35:
 this.$ = new DoWhile($$[$0-5],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 36:
this.$ = new For($$[$0-1],$$[$0-8],$$[$0-6],$$[$0-4],_$[$0-10].first_line,_$[$0-10]); 
break;
case 37: case 38:
this.$ = $$[$0]
break;
case 39:
 this.$ = new Incremento(new Operacion(new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 40:
 this.$ = new Decremento(new Operacion(new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),new Identificador($$[$0-1],_$[$0-1].first_line, _$[$0-1].first_column),Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column),_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 41:
 this.$ = new Return($$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 42:
this.$ = new Break(_$[$0].first_line, _$[$0].first_column); 
break;
case 43:
this.$ = new Continue(_$[$0].first_line, _$[$0].first_column);
break;
case 44:
this.$ = $$[$0]; 
break;
case 45:
this.$ = null; 
break;
case 46:
 this.$ = new Declaracion($$[$0-2],$$[$0],$$[$0-3],[],_$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 47:
 this.$ = new Declaracion(null,null,$$[$0-1],$$[$0],_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 51:
 this.$ =  new Asignacion($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
 this.$ = new If($$[$0-4],$$[$0-1],null,null,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 53:
 this.$ = new If($$[$0-8],$$[$0-5],$$[$0-1],null,_$[$0-10].first_line, _$[$0-10].first_column);
break;
case 54:
 this.$ = new If($$[$0-6],$$[$0-3],null,$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 55:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,false); 
break;
case 56:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column,true); 
break;
case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 65: case 105:
 this.$ = $$[$0] 
break;
case 64:
 this.$ = new Identificador($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 66:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.CONCAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
this.$ = new Operacion($$[$0-2],$$[$0],Operador.REPEAT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 68:
this.$ = new CharOfPosition($$[$0-5],$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 69:
this.$ = new SubString($$[$0-7],$$[$0-3],$$[$0-1],_$[$0-7].first_line, _$[$0-7].first_column);
break;
case 70:
this.$ = new Length($$[$0-4],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 71:
this.$ = new ToUpper($$[$0-4],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 72:
this.$ = new ToLower($$[$0-4],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 73:
 this.$ = new Logica($$[$0],$$[$0],Operador.NOT, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 74:
 this.$ = new Logica($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 75:
 this.$ = new Logica($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 76:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.IGUAL_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 77:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 78:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 79:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 80:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 81:
 this.$ = new Relacional($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 82:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 83:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 84:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 86:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 87:
 this.$ = new Operacion($$[$0],$$[$0],Operador.MENOS_UNARIO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 88:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.INCREMENTO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 89:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.DECREMENTO, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 90:
 this.$ = new Operacion($$[$0-3],$$[$0-1],Operador.POW, _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 91:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.SQRT, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 92:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.LOG, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 93:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.SENO, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 94:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.COSENO, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 95:
 this.$ = new Operacion($$[$0-1],$$[$0-1],Operador.TAN, _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 96:
 this.$ = new Ternario($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 97: case 98:
 this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 99: case 100:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 101:
 this.$ = new Primitivo(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 102:
 this.$ = new Primitivo(true, _$[$0].first_line, _$[$0].first_column); 
break;
case 103:
 this.$ = new Primitivo(false, _$[$0].first_line, _$[$0].first_column); 
break;
case 104:
 this.$ = $$[$0-1] 
break;
case 106:
this.$ = new TipoParse(Tipo.INT,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 107:
this.$ = new TipoParse(Tipo.DOUBLE,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 108:
this.$ = new TipoParse(Tipo.BOOL,$$[$0-1],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 109:
this.$ = new ToInt($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 110:
this.$ = new ToDouble($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 111:
this.$ = new ToString($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 112:
this.$ = new Typeof($$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 113:
this.$ = Tipo.INT; 
break;
case 114:
this.$ = Tipo.DOUBLE; 
break;
case 115:
this.$ = Tipo.STRING; 
break;
case 116:
this.$ = Tipo.BOOL; 
break;
case 117:
this.$ = Tipo.CHAR; 
break;
case 118:
this.$ = Tipo.VOID; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{1:[3]},{5:[1,35],6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},o($Vg,[2,3]),{8:[1,37]},{8:[1,38]},{8:[1,39]},o($Vg,[2,7]),o($Vg,[2,8]),{8:[1,40]},o($Vg,[2,10]),{8:[1,41]},{8:[1,42]},{8:[1,43]},{8:[1,44]},{20:[1,45],21:[1,46],27:$Vh,50:$Vi},{8:[1,49]},o($Vg,[2,18]),o($Vg,[2,19]),{27:[1,50]},{27:[1,51]},{19:[1,53],51:52,52:54},{27:[1,55]},{29:[1,56]},{27:[1,57]},{8:[2,45],18:68,19:$Vj,27:$Vk,40:59,47:58,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{8:[2,42]},{8:[2,43]},{27:[1,93]},{19:$VI,26:[1,94]},{19:[2,113]},{19:[2,114]},{19:[2,115]},{19:[2,116]},{19:[2,117]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,9]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),{8:[1,95]},{8:[1,96]},{18:68,19:$Vj,27:$Vk,28:[2,30],37:97,38:98,39:99,40:100,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:101,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},o($Vg,[2,17]),{18:68,19:$Vj,27:$Vk,40:102,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:103,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{8:[2,47],34:[1,104]},o($VJ,$VK,{27:[1,106],50:$VL}),o($VJ,[2,49]),{18:68,19:$Vj,27:$Vk,40:107,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{4:108,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{10:110,19:[1,113],22:111,25:$VM,31:112,44:109,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{8:[2,41]},{8:[2,44],20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},o($V41,[2,57]),o($V41,[2,58]),o($V41,[2,59]),o($V41,[2,60]),o($V41,[2,61]),o($V41,[2,62]),o($V41,[2,63]),o($V41,[2,64],{27:$Vh}),o($V41,[2,65]),o($V41,[2,97]),o($V41,[2,98]),o($V41,[2,99]),o($V41,[2,100]),o($V41,[2,101]),o($V41,[2,102]),o($V41,[2,103]),{18:68,19:$Vj,27:$Vk,40:134,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:135,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:136,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{27:[1,137]},{27:[1,138]},{27:[1,139]},{27:[1,140]},{27:[1,141]},{27:[1,142]},{18:68,19:$Vj,27:$Vk,40:143,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{66:[1,144]},{66:[1,145]},{66:[1,146]},{27:[1,147]},{27:[1,148]},{27:[1,149]},{27:[1,150]},{18:68,19:$Vj,27:$Vk,40:151,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{27:[1,152]},o($Vg,[2,15]),o($Vg,[2,16]),{28:[1,153]},{28:[2,29],34:[1,154]},o($V51,[2,32]),o($V51,[2,33],{20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31}),{8:[2,51],20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,155],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,156],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{19:[1,158],52:157},{18:68,19:$Vj,27:$Vk,40:159,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{25:$VM,28:[2,23],31:164,32:160,33:161,35:162,36:163,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{20:$VN,21:$VO,28:[1,165],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,30:[1,166],31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{8:[1,167]},{8:[2,37]},{8:[2,38]},{19:[1,168]},{50:$Vi},{19:$VI},{18:68,19:$Vj,27:$Vk,40:169,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:170,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:171,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:172,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:173,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},o($V41,[2,88]),o($V41,[2,89]),{18:68,19:$Vj,27:$Vk,40:174,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:175,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:176,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:177,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:178,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:179,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:180,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:181,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:182,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:183,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:184,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{67:[1,185],68:[1,186],69:[1,187],70:[1,188],71:[1,189]},{20:$VN,21:$VO,28:[1,190],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},o([8,28,34,92,93],[2,105],{20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o($V41,[2,87]),{18:68,19:$Vj,27:$Vk,40:191,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:192,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:193,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:194,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:195,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:196,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},o($V61,[2,73],{20:$VN,21:$VO}),{103:[1,197]},{103:[1,198]},{103:[1,199]},{18:68,19:$Vj,27:$Vk,40:200,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:201,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:202,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:203,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{20:$VN,21:$VO,28:[1,204],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{28:[1,205]},o($V41,[2,28]),{18:68,19:$Vj,27:$Vk,39:206,40:100,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{8:[2,55]},{8:[2,56]},o($VJ,[2,48]),o($VJ,$VK),{8:[2,46],20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{28:[1,207]},{28:[2,22],34:[1,208]},o($V51,[2,25]),o($V51,[2,26]),{19:[1,209]},{29:[1,210]},{41:[1,211]},{18:68,19:$Vj,27:$Vk,40:212,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{50:$VL},o($V71,[2,82],{20:$VN,21:$VO,83:$V01,84:$V11,85:$V21}),o($V71,[2,83],{20:$VN,21:$VO,83:$V01,84:$V11,85:$V21}),o($V61,[2,84],{20:$VN,21:$VO}),o($V61,[2,85],{20:$VN,21:$VO}),o($V61,[2,86],{20:$VN,21:$VO}),o($V81,[2,76],{20:$VN,21:$VO,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o($V81,[2,77],{20:$VN,21:$VO,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o($V81,[2,78],{20:$VN,21:$VO,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o($V81,[2,79],{20:$VN,21:$VO,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o($V81,[2,80],{20:$VN,21:$VO,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o($V81,[2,81],{20:$VN,21:$VO,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o($V91,[2,74],{20:$VN,21:$VO,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o([8,28,34,65,66,74,92,93],[2,75],{20:$VN,21:$VO,64:$VP,73:$VS,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),{20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31,93:[1,213]},o($V91,[2,66],{20:$VN,21:$VO,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),o([8,28,34,65,66,92,93],[2,67],{20:$VN,21:$VO,64:$VP,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21}),{27:[1,214]},{27:[1,215]},{27:[1,216]},{27:[1,217]},{27:[1,218]},o($V41,[2,104]),{20:$VN,21:$VO,34:[1,219],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,220],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,221],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,222],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,223],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,224],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{27:[1,225]},{27:[1,226]},{27:[1,227]},{20:$VN,21:$VO,28:[1,228],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,229],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,230],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,231],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{29:[1,232]},{29:[1,233]},o($V51,[2,31]),{29:[1,234]},{25:$VM,31:164,35:235,36:163,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},o($V51,[2,27]),{4:236,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{27:[1,237]},{8:[1,238],20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{18:68,19:$Vj,27:$Vk,40:239,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:240,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:241,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{28:[1,242]},{28:[1,243]},{28:[1,244]},{18:68,19:$Vj,27:$Vk,40:245,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},o($V41,[2,91]),o($V41,[2,92]),o($V41,[2,93]),o($V41,[2,94]),o($V41,[2,95]),{18:68,19:$Vj,27:$Vk,40:246,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:247,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{18:68,19:$Vj,27:$Vk,40:248,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},o($V41,[2,109]),o($V41,[2,110]),o($V41,[2,111]),o($V41,[2,112]),{4:249,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{4:250,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{4:251,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},o($V51,[2,24]),{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,30:[1,252],31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{18:68,19:$Vj,27:$Vk,40:253,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},{19:[1,255],45:254},o([8,28,34,93],[2,96],{20:$VN,21:$VO,64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31}),{20:$VN,21:$VO,28:[1,256],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,34:[1,257],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},o($V41,[2,70]),o($V41,[2,71]),o($V41,[2,72]),{20:$VN,21:$VO,28:[1,258],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,259],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,260],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{20:$VN,21:$VO,28:[1,261],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,30:[1,262],31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,30:[1,263],31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,30:[1,264],31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},o($Vg,[2,34]),{20:$VN,21:$VO,28:[1,265],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{28:[1,266]},{20:[1,267],21:[1,268]},o($V41,[2,68]),{18:68,19:$Vj,27:$Vk,40:269,57:60,58:61,59:62,60:63,61:64,62:65,63:66,72:$Vl,82:$Vm,86:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,94:$Vt,95:$Vu,96:$Vv,97:$Vw,98:$Vx,99:$Vy,100:$Vz,101:$VA,102:$VB,104:$VC,105:$VD,106:$VE,107:$VF,108:$VG,109:$VH},o($V41,[2,90]),o($V41,[2,106]),o($V41,[2,107]),o($V41,[2,108]),o($Vg,[2,52],{54:[1,270]}),o($Vg,[2,20]),o($Vg,[2,21]),{8:[2,35]},{29:[1,271]},{28:[2,39]},{28:[2,40]},{20:$VN,21:$VO,28:[1,272],64:$VP,65:$VQ,66:$VR,73:$VS,74:$VT,75:$VU,76:$VV,77:$VW,78:$VX,79:$VY,80:$VZ,81:$V_,82:$V$,83:$V01,84:$V11,85:$V21,92:$V31},{23:274,29:[1,273],53:$V8},{4:275,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},o($V41,[2,69]),{4:276,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},o($Vg,[2,54]),{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,30:[1,277],31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V0,22:16,23:17,24:18,25:$V1,30:[1,278],31:21,41:$V2,42:$V3,43:$V4,46:$V5,48:$V6,49:$V7,53:$V8,55:$V9,56:$Va,97:$Vb,102:$Vc,104:$Vd,105:$Ve,110:$Vf},o($Vg,[2,36]),o($Vg,[2,53])],
defaultActions: {26:[2,42],27:[2,43],30:[2,113],31:[2,114],32:[2,115],33:[2,116],34:[2,117],35:[2,1],58:[2,41],110:[2,37],111:[2,38],114:[2,118],155:[2,55],156:[2,56],265:[2,35],267:[2,39],268:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Print} = require("../Instrucciones/Print.js");
    const {Primitivo} = require("../Expresiones/Primitivo.js");
    const {Operacion} = require("../Expresiones/Operacion.js");
    const {Operador} = require("../AST/Operador.js");

    const {Relacional} = require("../Expresiones/Relacional.js");
    const {Logica} = require("../Expresiones/Logica.js");
    const {Identificador} = require("../Expresiones/Identificador.js");
    const {Ternario} = require("../Expresiones/Ternario.js");
    const {CharOfPosition} = require("../Expresiones/NativasString/CharOfPosition.js");
    const {SubString} = require("../Expresiones/NativasString/SubString.js");
    //const {LengthString} = require("../Expresiones/NativasString/LengthString.js");
    const {Length} = require("../Expresiones/NativasString/Length.js");
    const {ToUpper} = require("../Expresiones/NativasString/ToUpper.js");
    const {ToLower} = require("../Expresiones/NativasString/ToLower.js");
    const {Incremento} = require("../Expresiones/Incremento.js");
    const {Decremento} = require("../Expresiones/Decremento.js");
    const {TipoParse} = require("../Expresiones/Nativas/TipoParse.js");
    const {ToInt} = require("../Expresiones/Nativas/ToInt.js");
    const {ToDouble} = require("../Expresiones/Nativas/ToDouble.js");
    const {ToString} = require("../Expresiones/Nativas/ToString.js");
    const {Typeof} = require("../Expresiones/Nativas/Typeof.js");
    const {If} = require("../Instrucciones/If.js");

    const {Tipo} = require("../AST/Tipo.js");
    const {Declaracion} = require("../Instrucciones/Declaracion.js");
    const {Asignacion} = require("../Instrucciones/Asignacion.js");
    const {Funcion} = require("../Instrucciones/Funcion.js");
    const {Llamada} = require("../Instrucciones/Llamada.js");
    const {Return} = require("../Instrucciones/Return.js");
    const {Break} = require("../Instrucciones/Break.js");
    const {Continue} = require("../Instrucciones/Continue.js");
    const {Main} = require("../Instrucciones/Main.js");
    const {While} = require("../Instrucciones/While.js");
    const {DoWhile} = require("../Instrucciones/DoWhile.js");
    const {For} = require("../Instrucciones/For.js");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* IGNORE */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3:return 98;
break;
case 4:return 102;
break;
case 5:return 104;
break;
case 6:return 105;
break;
case 7:return 97;
break;
case 8:return 110;
break;
case 9:return 25;
break;
case 10:return 99;
break;
case 11:return 100;
break;
case 12:return 55;
break;
case 13:return 56;
break;
case 14:return 46;
break;
case 15:return 48;
break;
case 16:return 49;
break;
case 17:return 26;
break;
case 18:return 41;
break;
case 19:return 42;
break;
case 20:return 43;
break;
case 21:return 53;
break;
case 22:return 54;
break;
case 23:return 26;
break;
case 24:return 86;
break;
case 25:return 87;
break;
case 26:return 88;
break;
case 27:return 89;
break;
case 28:return 90;
break;
case 29:return 91;
break;
case 30:return 67;
break;
case 31:return 68;
break;
case 32:return 69;
break;
case 33:return 70;
break;
case 34:return 71;
break;
case 35:return 103;
break;
case 36:return 106;
break;
case 37:return 107;
break;
case 38:return 108;
break;
case 39:return 109;
break;
case 40:return 20;
break;
case 41:return 21;
break;
case 42:return 81;
break;
case 43:return 82;
break;
case 44:return 83;
break;
case 45:return 84;
break;
case 46:return 85;
break;
case 47:return 75;
break;
case 48:return 76;
break;
case 49:return 77;
break;
case 50:return 78;
break;
case 51:return 79;
break;
case 52:return 80;
break;
case 53:return 50;
break;
case 54:return 73;
break;
case 55:return 74;
break;
case 56:return 72;
break;
case 57:return 64;
break;
case 58:return 65;
break;
case 59:return 101;
break;
case 60:return 8;
break;
case 61:return 93;
break;
case 62:return 27;
break;
case 63:return 28;
break;
case 64:return 92;
break;
case 65:return 29;
break;
case 66:return 30;
break;
case 67:return 34;
break;
case 68:return 66;
break;
case 69:return 95;
break;
case 70:return 94;
break;
case 71:return 19;
break;
case 72:return 96;
break;
case 73:return 97;
break;
case 74:return;
break;
case 75:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 76:return 5
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\s+)/,/^(?:null\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:boolean\b)/,/^(?:char\b)/,/^(?:String\b)/,/^(?:void\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:return\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:main\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:main\b)/,/^(?:pow\b)/,/^(?:sqrt\b)/,/^(?:log\b)/,/^(?:sin\b)/,/^(?:cos\b)/,/^(?:tan\b)/,/^(?:caracterOfPosition\b)/,/^(?:subString\b)/,/^(?:length\b)/,/^(?:toUpperCase\b)/,/^(?:toLowerCase\b)/,/^(?:parse\b)/,/^(?:toInt\b)/,/^(?:toDouble\b)/,/^(?:toString\b)/,/^(?:typeof\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:<=)/,/^(?:>=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:!)/,/^(?:&)/,/^(?:\^)/,/^(?:\$)/,/^(?:;)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\?)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/,/^(?:{Comment})/,/^(?:.)/,/^(?:$)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}